{"version":3,"sources":["styles/common.js","styles/index.js","classes/Square.js","classes/Piece.js","data/index.js","classes/Game.js","rules/pawn.js","rules/king.js","rules/moves.js","rules/queen.js","rules/rook.js","rules/bishop.js","rules/knight.js","rules/index.js","rules/select.js","App.js","index.js"],"names":["fullVS","css","center","fRow","c","container","NoAppContainer","styled","div","AppContainer","GameBoard","GameRow","GameSquare","props","isLight","Highlight","player1","GamePiece","Square","row","col","piece","this","up","down","left","right","Piece","player","square","name","symbol","pieces","specialRow","Game","board","i","arr","j","setPiece","push","setNeighbours","movePawn","clickedPiece","nextSquare","moveSuccessfully","currentSquare","player1Rule","player2Rule","noPieceMovement","player1Attack","player2Attack","attackingMovement","rule","moveKing","normalMove","direction","appState","anyDistance","diagonalMove","directions","direction1","direction2","knightMove","d1","d2","moveQueen","moveRook","moveBishop","moveKnight","movePiece","setClickedPiece","setPlayer1Turn","removePiece","changeSquare","prev","selectPiece","p1Turn","setClicked","App","useClientDimensions","vw","vh","useState","game","player1Turn","handleClick","useCallback","noPiece","ownPiece","map","id","key","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b671f0bb.chunk.js","sourcesContent":["import { css } from \"styled-components\";\n\nexport const fullVS = css`\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport const center = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const fRow = css`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const c = {\n  blue: \"#5096F3\",\n  white: \"#EFF5FD\",\n  black: \"#000000\",\n  red: \"#CC0000\",\n  gray: \"#545454\",\n  lBlack: \"#454545\",\n  lRed: \"#D94545\"\n};\n","import styled from \"styled-components\";\n\nimport { fullVS, center, fRow, c } from \"./common\";\n\nconst container = `${fullVS} ${center}`;\n\nexport const NoAppContainer = styled.div`\n  ${container}\n`;\n\nexport const AppContainer = styled.div`\n  ${container} \n  background: ${c.gray};\n`;\n\nexport const GameBoard = styled.div`\n  width: 600px;\n  height: 600px;\n`;\n\nexport const GameRow = styled.div`\n  ${fRow}\n  width: 100%;\n  height: 75px;\n`;\n\nexport const GameSquare = styled.div`\n  ${center}\n  width: 75px;\n  height: 75px;\n  cursor: pointer;\n  position: relative;\n  background: ${props => (props.isLight ? c.white : c.blue)};\n`;\n\nexport const Highlight = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  background: ${props => (props.player1 ? c.lRed : c.lBlack)};\n`;\n\nexport const GamePiece = styled.div`\n  font-size: 50px;\n  color: ${props => (props.player1 ? c.red : c.black)};\n`;\n","class Square {\n  constructor(row, col, piece = null) {\n    this.row = row;\n    this.col = col;\n    this.piece = piece;\n    this.isLight = (row + col) % 2 === 0;\n    this.up = null;\n    this.down = null;\n    this.left = null;\n    this.right = null;\n  }\n\n  setNeighbours(up, down, left, right) {\n    this.up = up;\n    this.down = down;\n    this.left = left;\n    this.right = right;\n  }\n\n  removePiece() {\n    this.piece = null;\n  }\n\n  setPiece(piece) {\n    this.piece = piece;\n  }\n}\n\nexport default Square;\n","class Piece {\n  constructor(piece, player, square) {\n    this.player = player;\n    this.name = piece.name;\n    this.symbol = piece.symbol;\n    this.square = square;\n  }\n\n  changeSquare(square) {\n    this.square = square;\n  }\n}\n\nexport default Piece;\n","export const pieces = {\n  king: {\n    symbol: \"♚\",\n    name: \"king\"\n  },\n  queen: {\n    symbol: \"♛\",\n    name: \"queen\"\n  },\n  rook: {\n    symbol: \"♜\",\n    name: \"rook\"\n  },\n  bishop: {\n    symbol: \"♝\",\n    name: \"bishop\"\n  },\n  knight: {\n    symbol: \"♞\",\n    name: \"knight\"\n  },\n  pawn: {\n    symbol: \"♟\",\n    name: \"pawn\"\n  }\n};\n\nconst { rook, knight, bishop, queen, king } = pieces;\n\nexport const specialRow = [\n  rook,\n  knight,\n  bishop,\n  queen,\n  king,\n  bishop,\n  knight,\n  rook\n];\n","import Square from \"./Square\";\nimport Piece from \"./Piece\";\nimport { pieces, specialRow } from \"../data\";\n\nclass Game {\n  constructor() {\n    this.board = [];\n    for (let i = 1; i <= 8; i++) {\n      let arr = [];\n      for (let j = 1; j <= 8; j++) {\n        let piece = null;\n        const square = new Square(i, j);\n        if (i === 1) {\n          piece = new Piece(specialRow[j - 1], 1, square);\n        } else if (i === 8) {\n          piece = new Piece(specialRow[8 - j], 2, square);\n        } else if (i === 2) {\n          piece = new Piece(pieces.pawn, 1, square);\n        } else if (i === 7) {\n          piece = new Piece(pieces.pawn, 2, square);\n        }\n        square.setPiece(piece);\n        arr.push(square);\n      }\n      this.board.push(arr);\n    }\n\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        const square = this.board[i][j];\n        const up = i - 1 >= 0 ? this.board[i - 1][j] : null;\n        const down = i + 1 < 8 ? this.board[i + 1][j] : null;\n        const left = j - 1 >= 0 ? this.board[i][j - 1] : null;\n        const right = j + 1 < 8 ? this.board[i][j + 1] : null;\n        square.setNeighbours(up, down, left, right);\n      }\n    }\n  }\n}\n\nexport default Game;\n","const movePawn = ({ clickedPiece, nextSquare, moveSuccessfully }) => {\n  const currentSquare = clickedPiece.square;\n\n  const rule = () => {\n    const player1Rule =\n      clickedPiece.player === 1 && // if player1, then rules apply\n      ((currentSquare.row === 2 && // if on first sq, then double jump possible\n        (currentSquare.down.down === nextSquare || // check if double jump\n          currentSquare.down === nextSquare)) || // check if single jump\n        currentSquare.down === nextSquare); // if not on 1st sq, check if single jump\n\n    const player2Rule =\n      clickedPiece.player === 2 && // if player2, then rules apply\n      ((currentSquare.row === 7 &&\n        (currentSquare.up.up === nextSquare ||\n          currentSquare.up === nextSquare)) ||\n        currentSquare.up === nextSquare);\n\n    const noPieceMovement =\n      nextSquare.piece === null && (player1Rule || player2Rule);\n\n    const player1Attack =\n      currentSquare.down.right === nextSquare ||\n      currentSquare.down.left === nextSquare;\n\n    const player2Attack =\n      currentSquare.up.right === nextSquare ||\n      currentSquare.up.left === nextSquare;\n\n    const attackingMovement =\n      nextSquare.piece !== null &&\n      ((clickedPiece.player === 1 && player1Attack) ||\n        (clickedPiece.player === 2 && player2Attack));\n\n    return noPieceMovement || attackingMovement;\n  };\n\n  if (rule()) moveSuccessfully();\n};\n\nexport default movePawn;\n","const moveKing = ({ clickedPiece, nextSquare, moveSuccessfully }) => {\n  const currentSquare = clickedPiece.square;\n\n  const rule = () => {\n    const movementsPossible =\n      nextSquare.up === currentSquare ||\n      nextSquare.left === currentSquare ||\n      nextSquare.right === currentSquare ||\n      nextSquare.down === currentSquare ||\n      nextSquare.up.left === currentSquare ||\n      nextSquare.up.right === currentSquare ||\n      nextSquare.down.left === currentSquare ||\n      nextSquare.down.right === currentSquare;\n\n    return movementsPossible;\n  };\n\n  if (rule()) moveSuccessfully();\n};\n\nexport default moveKing;\n","export const normalMove = (direction, appState, anyDistance) => {\n  const { clickedPiece, nextSquare } = appState;\n\n  let currentSquare = clickedPiece.square;\n\n  // if square exists in that direction\n  if (currentSquare[direction] !== null) {\n    if (anyDistance) {\n      // piece can move any number of squares in a direction\n      // while squares still exist in direction and queen doesnt encounter a piece\n      while (\n        currentSquare[direction] !== null &&\n        currentSquare[direction].piece === null\n      ) {\n        // check if square is where user wants to move queen\n        if (currentSquare[direction] === nextSquare) return true;\n        // keep moving in the same direction\n        currentSquare = currentSquare[direction];\n      }\n      // cant move further because edge of board or piece in the way\n      if (\n        currentSquare[direction] !== null &&\n        currentSquare[direction].piece !== null &&\n        currentSquare[direction] === nextSquare &&\n        currentSquare[direction].piece.player !== clickedPiece.player\n      )\n        return true;\n    } else {\n      // TODO: You can generalize pawn and king's single movement here?\n    }\n  }\n  // movement not possible\n  return false;\n};\n\nexport const diagonalMove = (directions, appState, anyDistance) => {\n  const [direction1, direction2] = directions;\n  const { clickedPiece, nextSquare } = appState;\n\n  let currentSquare = clickedPiece.square;\n\n  // if square exists in the combination of directions\n  if (\n    currentSquare[direction1] !== null &&\n    currentSquare[direction1][direction2] !== null\n  ) {\n    if (anyDistance) {\n      // piece can move any number of squares in a diagonal direction\n      // as long as squares still exist and there are no pieces on them\n      while (\n        currentSquare[direction1] !== null &&\n        currentSquare[direction1][direction2] !== null &&\n        currentSquare[direction1][direction2].piece === null\n      ) {\n        // check if square is where user wants to move queen\n        if (currentSquare[direction1][direction2] === nextSquare) return true;\n        // keep moving in the same direction\n        currentSquare = currentSquare[direction1][direction2];\n      }\n      // cant move further because edge of board or piece in the way\n      if (\n        currentSquare[direction1] !== null &&\n        currentSquare[direction1][direction2] !== null &&\n        currentSquare[direction1][direction2].piece !== null &&\n        currentSquare[direction1][direction2] === nextSquare &&\n        currentSquare[direction1][direction2].piece.player !==\n          clickedPiece.player\n      )\n        return true;\n    } else {\n      // TODO: handle single diagonal move for pawn?\n    }\n  }\n  // movement not possible\n  return false;\n};\n\nexport const knightMove = (directions, appState) => {\n  const [d1, d2] = directions; // up and left\n  const { clickedPiece, nextSquare } = appState;\n\n  let { square } = clickedPiece;\n\n  if (\n    // two moves in direction1 and one move in direction2\n    // if square exists at that posiion\n    ((square[d1] &&\n      square[d1][d1] &&\n      square[d1][d1][d2] &&\n      // check if next square is in this position\n      square[d1][d1][d2] === nextSquare) ||\n      // two moves in direction2 and one move in direction1\n      // if square exists at that position\n      (square[d2] &&\n        square[d2][d2] &&\n        square[d2][d2][d1] &&\n        // check if next square is in this position\n        square[d2][d2][d1] === nextSquare)) &&\n    // check if next square is empty\n    (nextSquare.piece === null ||\n      // or if piece in square is of opponent player\n      nextSquare.piece.player !== clickedPiece.player)\n  )\n    return true;\n  // movement not possible\n  return false;\n};\n","import { normalMove, diagonalMove } from \"./moves\";\n\nconst moveQueen = ({ clickedPiece, nextSquare, moveSuccessfully }) => {\n  const rule = () => {\n    return (\n      normalMove(\"up\", { clickedPiece, nextSquare }, true) ||\n      normalMove(\"down\", { clickedPiece, nextSquare }, true) ||\n      normalMove(\"left\", { clickedPiece, nextSquare }, true) ||\n      normalMove(\"right\", { clickedPiece, nextSquare }, true) ||\n      diagonalMove([\"up\", \"left\"], { clickedPiece, nextSquare }, true) ||\n      diagonalMove([\"up\", \"right\"], { clickedPiece, nextSquare }, true) ||\n      diagonalMove([\"down\", \"left\"], { clickedPiece, nextSquare }, true) ||\n      diagonalMove([\"down\", \"right\"], { clickedPiece, nextSquare }, true)\n    );\n  };\n\n  // if movement rules allow the movement, then move is successful\n  if (rule()) moveSuccessfully();\n};\n\nexport default moveQueen;\n","import { normalMove } from \"./moves\";\n\nconst moveRook = ({ clickedPiece, nextSquare, moveSuccessfully }) => {\n  const rule = () => {\n    return (\n      normalMove(\"up\", { clickedPiece, nextSquare }, true) ||\n      normalMove(\"down\", { clickedPiece, nextSquare }, true) ||\n      normalMove(\"left\", { clickedPiece, nextSquare }, true) ||\n      normalMove(\"right\", { clickedPiece, nextSquare }, true)\n    );\n  };\n\n  // if movement rules allow the movement, then move is successful\n  if (rule()) moveSuccessfully();\n};\n\nexport default moveRook;\n","import { diagonalMove } from \"./moves\";\n\nconst moveBishop = ({ clickedPiece, nextSquare, moveSuccessfully }) => {\n  const rule = () => {\n    return (\n      diagonalMove([\"up\", \"left\"], { clickedPiece, nextSquare }, true) ||\n      diagonalMove([\"up\", \"right\"], { clickedPiece, nextSquare }, true) ||\n      diagonalMove([\"down\", \"left\"], { clickedPiece, nextSquare }, true) ||\n      diagonalMove([\"down\", \"right\"], { clickedPiece, nextSquare }, true)\n    );\n  };\n\n  // if movement rules allow the movement, then move is successful\n  if (rule()) moveSuccessfully();\n};\n\nexport default moveBishop;\n","import { knightMove } from \"./moves\";\n\nconst moveKnight = ({ clickedPiece, nextSquare, moveSuccessfully }) => {\n  const rule = () => {\n    return (\n      knightMove([\"up\", \"left\"], { clickedPiece, nextSquare }, true) ||\n      knightMove([\"up\", \"right\"], { clickedPiece, nextSquare }, true) ||\n      knightMove([\"down\", \"left\"], { clickedPiece, nextSquare }, true) ||\n      knightMove([\"down\", \"right\"], { clickedPiece, nextSquare }, true)\n    );\n  };\n\n  // if movement rules allow the movement, then move is successful\n  if (rule()) moveSuccessfully();\n};\n\nexport default moveKnight;\n","import movePawn from \"./pawn\";\nimport moveKing from \"./king\";\nimport moveQueen from \"./queen\";\nimport moveRook from \"./rook\";\nimport moveBishop from \"./bishop\";\nimport moveKnight from \"./knight\";\n\nconst movePiece = (\n  clickedPiece,\n  nextSquare,\n  setClickedPiece,\n  setPlayer1Turn\n) => {\n  const moveSuccessfully = () => {\n    // remove piece from original square\n    clickedPiece.square.removePiece();\n    // let piece know which square it will be placed in\n    clickedPiece.changeSquare(nextSquare);\n    // let square know that piece has moved on to it\n    nextSquare.setPiece(clickedPiece);\n    // remove clickedPiece from state\n    setClickedPiece(null);\n    // change player turn\n    setPlayer1Turn(prev => !prev);\n  };\n\n  const appState = { clickedPiece, nextSquare, moveSuccessfully };\n\n  switch (clickedPiece.name) {\n    case \"pawn\":\n      movePawn(appState);\n      break;\n    case \"king\":\n      moveKing(appState);\n      break;\n    case \"queen\":\n      moveQueen(appState);\n      break;\n    case \"rook\":\n      moveRook(appState);\n      break;\n    case \"bishop\":\n      moveBishop(appState);\n      break;\n    case \"knight\":\n      moveKnight(appState);\n      break;\n    default:\n      moveSuccessfully();\n  }\n};\n\nexport default movePiece;\n","const selectPiece = (p1Turn, square, setClicked) => {\n  const rule = () =>\n    (p1Turn && square.piece.player === 1) ||\n    (!p1Turn && square.piece.player === 2);\n\n  if (square.piece !== null && rule()) setClicked(square.piece);\n};\n\nexport default selectPiece;\n","import React, { useState, useCallback } from \"react\";\nimport useClientDimensions from \"react-client-dimensions\";\nimport {\n  NoAppContainer,\n  GameRow,\n  Highlight,\n  GameBoard,\n  AppContainer,\n  GameSquare,\n  GamePiece\n} from \"./styles\";\nimport Game from \"./classes/Game\";\nimport movePiece from \"./rules\";\nimport selectPiece from \"./rules/select\";\n\nconst App = () => {\n  const { vw, vh } = useClientDimensions();\n  const [game, setGame] = useState(new Game());\n  const [clickedPiece, setClickedPiece] = useState(null);\n  const [player1Turn, setPlayer1Turn] = useState(true);\n\n  // Logging game state\n  // console.log(game);\n\n  const handleClick = useCallback(\n    square => {\n      // piece hasn't been selected yet\n      const noPiece = clickedPiece === null;\n      // or player changes his mind about piece s/he wants to move\n      const ownPiece =\n        square.piece !== null && square.piece.player === (player1Turn ? 1 : 2);\n\n      // if noPiece or ownPiece, then select piece\n      if (noPiece || ownPiece)\n        selectPiece(player1Turn, square, setClickedPiece);\n      else movePiece(clickedPiece, square, setClickedPiece, setPlayer1Turn); // else check if move is possible\n    },\n    [clickedPiece, player1Turn]\n  );\n\n  if (vw < 800 || vh < 600) {\n    return (\n      <NoAppContainer>\n        Sorry, App only works on screens larger than 800px wide and 600px high\n      </NoAppContainer>\n    );\n  }\n\n  return (\n    <AppContainer>\n      <GameBoard>\n        {game.board.map((row, id) => (\n          <GameRow key={id}>\n            {row.map((square, id) => (\n              <GameSquare\n                key={id}\n                onClick={() => handleClick(square)}\n                isLight={square.isLight}\n              >\n                {clickedPiece !== null && clickedPiece === square.piece ? (\n                  <Highlight player1={square.piece.player === 1} />\n                ) : null}\n                {square.piece ? (\n                  <GamePiece player1={square.piece.player === 1}>\n                    {square.piece.symbol}\n                  </GamePiece>\n                ) : null}\n              </GameSquare>\n            ))}\n          </GameRow>\n        ))}\n      </GameBoard>\n    </AppContainer>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}